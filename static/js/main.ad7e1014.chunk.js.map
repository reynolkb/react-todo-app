{"version":3,"sources":["components/Nav/Nav.module.css","components/Form/Form.js","components/Todo/Todo.js","components/TodoList/TodoList.js","pages/TodoPage.js","pages/NoMatch.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","event","target","type","className","onClick","preventDefault","text","completed","id","Math","random","e","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","TodoPage","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","style","marginTop","NoMatch","role","aria-label","Nav","styles","NavBar","href","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad7e1014.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Nav_Navbar__3P-WA\"};","import React from 'react';\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n    // here you can write js \n    const inputTextHandler = (event) => {\n        setInputText(event.target.value);\n    };\n    const submitTodoHandler = (event) => {\n        event.preventDefault();\n        setTodos([\n            ...todos, { text: inputText, completed: false, id: Math.random() * 1000 }\n        ]);\n        setInputText(\"\");\n    }\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n    return (\n        <form>\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <div className=\"select\">\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;","import React from 'react';\n\nconst Todo = ({ text, todo, todos, setTodos }) => {\n    // Events\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n    const completeHandler = () => {\n        setTodos(todos.map(item => {\n            if (item.id === todo.id) {\n                return {\n                    ...item, completed: !item.completed\n                }\n            }\n            return item;\n        }))\n    }\n    return (\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <i className=\"fas fa-check\"></i>\n            </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    );\n}\n\nexport default Todo;","import React from 'react';\n// import components\nimport Todo from '../Todo/Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map((todo) => (\n                    <Todo\n                        setTodos={setTodos}\n                        todos={todos}\n                        key={todo.id}\n                        todo={todo}\n                        text={todo.text}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport '../App.css';\n// Importing Components\nimport Form from '../components/Form/Form';\nimport TodoList from '../components/TodoList/TodoList';\n\nfunction TodoPage() {\n  // set state\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  // run once when the app starts\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  // use effect\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  // Functions\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n\n  // save to local storage\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header style={{ marginTop: \"100px\" }}>\n        <h1>Enter Todos Below</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        todos={todos}\n        setTodos={setTodos}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList\n        setTodos={setTodos}\n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default TodoPage;\n","import React from \"react\";\nfunction NoMatch() {\n    return (\n        <div>\n            <h1>404 Page Not Found</h1>\n            <h1>\n                <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                    ðŸ™„\n        </span>\n            </h1>\n        </div>\n    );\n}\nexport default NoMatch;","import React, { Fragment } from 'react';\nimport styles from \"./Nav.module.css\";\n\nfunction Nav() {\n    return (\n        <Fragment className={styles.NavBar}>\n            <nav className=\"navbar navbar-expand-lg navbar-primary text-white bg-primary navbar-inverse navbar-fixed-top\">\n                <div className=\"container-fluid desktop\">\n                    <div className=\"navbar-header\">\n                        <a className=\"navbar-brand text-white\" href=\"/\">Todo App</a>\n                    </div>\n                    <ul className=\"nav navbar-nav mr-auto\">\n                        <li><a href=\"/\">Home</a></li>\n                        <li><a href=\"/\">Todo Lists</a></li>\n                    </ul>\n                    <ul className=\"nav navbar-nav navbar-right\">\n                        <li><a href=\"/\"><span className=\"glyphicon glyphicon-user\"></span> Sign Up</a></li>\n                        <li><a href=\"/\"><span className=\"glyphicon glyphicon-log-in\"></span> Login</a></li>\n                    </ul>\n                </div>\n            </nav>\n        </Fragment>\n    )\n}\nexport default Nav;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport TodoPage from './pages/TodoPage';\nimport NoMatch from './pages/NoMatch';\nimport Nav from \"./components/Nav/Nav\";\n\nfunction App() {\n    return (\n        <Router>\n            <Nav />\n            <div>\n                <Switch>\n                    <Route path=\"/\" component={TodoPage} />\n                    <Route component={NoMatch} />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport TodoPage from './pages/TodoPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}